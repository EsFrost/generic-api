This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-07T11:04:56.430Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
_tests/auth.middleware.test.js
_tests/posts.controller.test.js
_tests/users.controller.test.js
.gitignore
controllers/CategoriesController.js
controllers/PostsController.js
controllers/UsersController.js
db_related/dummy_data.sql
db_related/tables.sql
index.js
jest.setup.js
middleware/authMiddleware.js
models/CategoriesModel.js
models/PostsModel.js
models/UsersModel.js
package.json
readme.md
routes/CategoriesRoutes.js
routes/PostsRoutes.js
routes/UsersRoutes.js
todo
utils/db.js
wireframe/generic_api.drawio

================================================================
Repository Files
================================================================

================
File: _tests/auth.middleware.test.js
================
const jwt = require("jsonwebtoken");
const { authMiddleware } = require("../middleware/authMiddleware");

describe("AuthMiddleware", () => {
  let mockReq;
  let mockRes;
  let nextFunction;

  beforeEach(() => {
    mockReq = {
      cookies: {},
    };
    mockRes = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };
    nextFunction = jest.fn();
  });

  it("should call next() when valid token is provided", () => {
    const token = jwt.sign(
      { id: "123", username: "test" },
      process.env.JWT_SECRET
    );
    mockReq.cookies.token = token;

    authMiddleware(mockReq, mockRes, nextFunction);

    expect(nextFunction).toHaveBeenCalled();
    expect(mockReq.user).toBeDefined();
    expect(mockReq.user.id).toBe("123");
    expect(mockReq.user.username).toBe("test");
  });
});

================
File: _tests/posts.controller.test.js
================
const request = require("supertest");
const app = require("../index");
const pool = require("../utils/db");
const bcrypt = require("bcrypt");
const { v4: uuidv4 } = require("uuid");

describe("PostsController", () => {
  let testUser;
  let testPost;
  let authToken;

  beforeAll(async () => {
    // Create test user
    const hashedPassword = await bcrypt.hash("testpass123", 12);
    testUser = {
      id: uuidv4(),
      username: "testuser",
      email: "test@example.com",
      password: hashedPassword,
    };

    await pool.query(
      "INSERT INTO users (id, username, email, password) VALUES (?, ?, ?, ?)",
      [testUser.id, testUser.username, testUser.email, testUser.password]
    );

    // Login to get token
    const loginResponse = await request(app).post("/users/login").send({
      email: testUser.email,
      password: "testpass123",
    });

    authToken = loginResponse.body.token;

    // Create test post
    testPost = {
      id: uuidv4(),
      title: "Test Post",
      content: "Test Content",
    };

    await pool.query(
      "INSERT INTO posts (id, title, content) VALUES (?, ?, ?)",
      [testPost.id, testPost.title, testPost.content]
    );
  });

  afterAll(async () => {
    // Clean up test data
    await pool.query("DELETE FROM posts WHERE id = ?", [testPost.id]);
    await pool.query("DELETE FROM users WHERE id = ?", [testUser.id]);
    await pool.end();
  });

  describe("GET /posts", () => {
    it("should return all posts", async () => {
      const response = await request(app).get("/posts");

      expect(response.status).toBe(200);
      expect(Array.isArray(response.body)).toBeTruthy();
      expect(response.body.length).toBeGreaterThan(0);
      expect(
        response.body.find((post) => post.id === testPost.id)
      ).toBeTruthy();
    });
  });

  describe("GET /posts/:id", () => {
    it("should return a specific post", async () => {
      const response = await request(app).get(`/posts/${testPost.id}`);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty("id", testPost.id);
      expect(response.body).toHaveProperty("title", testPost.title);
      expect(response.body).toHaveProperty("content", testPost.content);
    });

    it("should return 400 for invalid UUID", async () => {
      const response = await request(app).get("/posts/invalid-uuid");

      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty("error", "Invalid post id!");
    });
  });

  describe("POST /posts", () => {
    it("should create a new post when authenticated", async () => {
      const newPost = {
        title: "New Test Post",
        content: "New Test Content",
      };

      const response = await request(app)
        .post("/posts")
        .set("Cookie", [`token=${authToken}`])
        .send(newPost);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty(
        "message",
        "Post created successfully!"
      );

      // Clean up
      const posts = await pool.query("SELECT * FROM posts WHERE title = ?", [
        newPost.title,
      ]);
      await pool.query("DELETE FROM posts WHERE id = ?", [posts[0][0].id]);
    });

    it("should fail to create post without authentication", async () => {
      const newPost = {
        title: "New Test Post",
        content: "New Test Content",
      };

      const response = await request(app).post("/posts").send(newPost);

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "No token provided");
    });
  });

  describe("PUT /posts/:id", () => {
    it("should update a post when authenticated", async () => {
      const updatedData = {
        title: "Updated Test Post",
        content: "Updated Test Content",
      };

      const response = await request(app)
        .put(`/posts/${testPost.id}`)
        .set("Cookie", [`token=${authToken}`])
        .send(updatedData);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty(
        "message",
        "Post edited successfully!"
      );

      // Verify update
      const [updatedPost] = await pool.query(
        "SELECT * FROM posts WHERE id = ?",
        [testPost.id]
      );
      expect(updatedPost[0].title).toBe(updatedData.title);
      expect(updatedPost[0].content).toBe(updatedData.content);
    });

    it("should fail to update post without authentication", async () => {
      const updatedData = {
        title: "Updated Test Post",
        content: "Updated Test Content",
      };

      const response = await request(app)
        .put(`/posts/${testPost.id}`)
        .send(updatedData);

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "No token provided");
    });
  });

  describe("DELETE /posts/:id", () => {
    let tempPost;

    beforeEach(async () => {
      tempPost = {
        id: uuidv4(),
        title: "Temp Test Post",
        content: "Temp Test Content",
      };

      await pool.query(
        "INSERT INTO posts (id, title, content) VALUES (?, ?, ?)",
        [tempPost.id, tempPost.title, tempPost.content]
      );
    });

    it("should delete a post when authenticated", async () => {
      const response = await request(app)
        .delete(`/posts/${tempPost.id}`)
        .set("Cookie", [`token=${authToken}`]);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty(
        "message",
        "Post deleted successfully!"
      );

      // Verify deletion
      const [posts] = await pool.query("SELECT * FROM posts WHERE id = ?", [
        tempPost.id,
      ]);
      expect(posts.length).toBe(0);
    });

    it("should fail to delete post without authentication", async () => {
      const response = await request(app).delete(`/posts/${tempPost.id}`);

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "No token provided");
    });
  });
});

================
File: _tests/users.controller.test.js
================
const request = require("supertest");
const app = require("../index");
const pool = require("../utils/db");
const bcrypt = require("bcrypt");
const { v4: uuidv4 } = require("uuid");

describe("UsersController", () => {
  let testUser;

  beforeAll(async () => {
    // Create test user
    const hashedPassword = await bcrypt.hash("testpass123", 12);
    testUser = {
      id: uuidv4(),
      username: "testuser",
      email: "test@example.com",
      password: hashedPassword,
    };

    await pool.query(
      "INSERT INTO users (id, username, email, password) VALUES (?, ?, ?, ?)",
      [testUser.id, testUser.username, testUser.email, testUser.password]
    );
  });

  afterAll(async () => {
    // Clean up test data
    await pool.query("DELETE FROM users WHERE email = ?", [testUser.email]);
    await pool.end();
  });

  describe("POST /users/login", () => {
    it("should login successfully with valid credentials", async () => {
      const response = await request(app).post("/users/login").send({
        email: testUser.email,
        password: "testpass123",
      });

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty("message", "Login successful");
      expect(response.body).toHaveProperty("token");
      expect(response.headers["set-cookie"]).toBeDefined();
    });

    it("should fail with invalid password", async () => {
      const response = await request(app).post("/users/login").send({
        email: testUser.email,
        password: "wrongpassword",
      });

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "Invalid credentials");
    });

    it("should fail with non-existent email", async () => {
      const response = await request(app).post("/users/login").send({
        email: "nonexistent@example.com",
        password: "testpass123",
      });

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "Invalid credentials");
    });

    it("should fail with invalid email format", async () => {
      const response = await request(app).post("/users/login").send({
        email: "invalid-email",
        password: "testpass123",
      });

      expect(response.status).toBe(400);
      expect(response.body).toHaveProperty("error", "Invalid data!");
    });
  });

  describe("POST /users/logout", () => {
    let authToken;

    beforeEach(async () => {
      // Login to get token
      const loginResponse = await request(app).post("/users/login").send({
        email: testUser.email,
        password: "testpass123",
      });

      authToken = loginResponse.body.token;
    });

    it("should logout successfully with valid token", async () => {
      const response = await request(app)
        .post("/users/logout")
        .set("Cookie", [`token=${authToken}`]);

      expect(response.status).toBe(200);
      expect(response.body).toHaveProperty("message", "Logout successful");

      // Verify cookie is cleared
      const cookies = response.headers["set-cookie"][0].split(";");
      expect(cookies[0]).toEqual("token=");
    });

    it("should fail to logout without token", async () => {
      const response = await request(app).post("/users/logout");

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "No token provided");
    });

    it("should fail to logout with invalid token", async () => {
      const response = await request(app)
        .post("/users/logout")
        .set("Cookie", ["token=invalid-token"]);

      expect(response.status).toBe(401);
      expect(response.body).toHaveProperty("error", "Invalid token");
    });
  });
});

================
File: .gitignore
================
/node_modules
.env

================
File: controllers/CategoriesController.js
================
const { v4: uuidv4 } = require("uuid");
const categoriesModel = require("../models/CategoriesModel");
const sanitizeHtml = require("sanitize-html");
const validator = require("validator");
require("dotenv").config();

async function showAllCategories(req, res) {
  try {
    const result = await categoriesModel.getAllCategories();
    res.status(200).send(result);
  } catch (err) {
    res
      .status(500)
      .json({ error: "Internal server error", details: err.message });
  }
}

module.exports = {
  showAllCategories,
};

================
File: controllers/PostsController.js
================
const { v4: uuidv4 } = require("uuid");
const postsModel = require("../models/PostsModel");
const sanitizeHtml = require("sanitize-html");
const validator = require("validator");
require("dotenv").config();

// Configure sanitize-html options for TinyMCE content
const sanitizeOptions = {
  allowedTags: [
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "blockquote",
    "p",
    "a",
    "ul",
    "ol",
    "nl",
    "li",
    "b",
    "i",
    "strong",
    "em",
    "strike",
    "code",
    "hr",
    "br",
    "div",
    "table",
    "thead",
    "caption",
    "tbody",
    "tr",
    "th",
    "td",
    "pre",
    "span",
    "img",
    "sub",
    "sup",
  ],
  allowedAttributes: {
    a: ["href", "name", "target"],
    img: ["src", "alt", "height", "width"],
    "*": ["style", "class"], // Allow style and class attributes on all elements
  },
  allowedStyles: {
    "*": {
      // Allow color and text-related properties
      color: [
        /^#(0x)?[0-9a-f]+$/i,
        /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,
      ],
      "text-align": [/^left$/, /^right$/, /^center$/, /^justify$/],
      "font-size": [/^\d+(?:px|em|%)$/],
      "text-decoration": [/^underline$/, /^line-through$/],
      "font-weight": [/^bold$/, /^normal$/],
      "font-style": [/^italic$/],
      "background-color": [
        /^#(0x)?[0-9a-f]+$/i,
        /^rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)$/,
      ],
    },
  },
  allowedSchemes: ["http", "https", "ftp", "mailto"],
  allowProtocolRelative: true,
};

async function showAllPosts(req, res) {
  try {
    const result = await postsModel.getAllPosts();
    res.status(200).send(result);
  } catch (err) {
    console.log(err);
  }
}

async function showPost(req, res) {
  try {
    let id = req.params.id;
    id = sanitizeHtml(id);

    if (validator.isUUID(id)) {
      const result = await postsModel.getPostById(id);
      res.status(200).send(result);
    } else {
      res.status(400).json({ error: "Invalid post id!" });
    }
  } catch (err) {
    console.log(err);
  }
}

async function newPost(req, res) {
  let { title, content } = req.body;
  const id = uuidv4();

  // Sanitize title normally (no HTML needed)
  title = sanitizeHtml(title);
  // Sanitize content with TinyMCE-friendly options
  content = sanitizeHtml(content, sanitizeOptions);

  if (validator.isUUID(id)) {
    try {
      await postsModel.createPost(id, title, content);
      res.status(200).json({ message: "Post created successfully!" });
    } catch (err) {
      res
        .status(500)
        .json({ error: "Internal server error", details: err.message });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

async function editPost(req, res) {
  let { title, content } = req.body;
  const id = req.params.id;

  // Sanitize title normally (no HTML needed)
  title = sanitizeHtml(title);
  // Sanitize content with TinyMCE-friendly options
  content = sanitizeHtml(content, sanitizeOptions);

  if (validator.isUUID(id)) {
    try {
      await postsModel.editPost(title, content, id);
      res.status(200).json({ message: "Post edited successfully!" });
    } catch (err) {
      res
        .status(500)
        .json({ error: "Internal server error", details: err.message });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

async function deletePost(req, res) {
  const id = req.params.id;

  if (validator.isUUID(id)) {
    try {
      await postsModel.deletePost(id);
      res.status(200).json({ message: "Post deleted successfully!" });
    } catch (err) {
      res
        .status(500)
        .json({ error: "Internal server error", details: err.message });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

module.exports = {
  showAllPosts,
  showPost,
  newPost,
  editPost,
  deletePost,
};

================
File: controllers/UsersController.js
================
const usersModel = require("../models/UsersModel");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
require("dotenv").config();
const secret = process.env.JWT_SECRET;
const sanitizeHtml = require("sanitize-html");
const validator = require("validator");

// Token generation
function generateToken(user) {
  return jwt.sign(
    {
      id: user.id,
      username: user.username,
      email: user.email,
    },
    secret,
    { expiresIn: "30d" }
  );
}

async function loginUser(req, res) {
  let { email, password } = req.body;
  email = sanitizeHtml(email);
  password = sanitizeHtml(password);

  if (validator.isEmail(email) && validator.isAlphanumeric(password)) {
    try {
      const user = await usersModel.getUserByEmail(email);
      if (user.length === 0) {
        return res.status(401).json({ error: "Invalid credentials" });
      }

      const isMatch = await bcrypt.compare(password, user[0].password);
      if (!isMatch) {
        return res.status(401).json({ error: "Invalid credentials" });
      }

      const token = generateToken(user[0]);

      // secure: process.env.NODE_ENV === "production"
      res.cookie("token", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days
        sameSite: "lax", // Added security measure
        domain: "localhost",
        path: "/",
      });

      res.status(200).json({
        message: "Login successful",
        token: token,
      });
    } catch (err) {
      res.status(500).json({ error: "Internal server error" });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

async function showAllUsers(req, res) {
  try {
    const result = await usersModel.getAllUsers();
    res.status(200).send(result);
  } catch (err) {
    console.log(err);
  }
}

async function logoutUser(req, res) {
  try {
    res.clearCookie("token", {
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
      sameSite: "lax", // Added security measure
      domain: "localhost",
      path: "/",
    });

    res.status(200).json({ message: "Logout successful" });
  } catch (err) {
    res.status(500).json({ error: "Internal server error" });
  }
}

module.exports = {
  loginUser,
  showAllUsers,
  logoutUser,
};

================
File: db_related/dummy_data.sql
================
-- First, insert admin user (password is 'admin123' hashed with bcrypt)
INSERT INTO users (id, username, email, password) 
VALUES (
    'f47ac10b-58cc-4372-a567-0e02b2c3d479',
    'admin',
    'admin@example.com',
    '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewfWxHrR/jQh/zTC'  -- 'admin123' hashed
);

-- Then insert all categories
INSERT INTO categories (id, name) VALUES
    ('d24944c7-9d71-4451-a143-93834b0297aa', 'Technology'),
    ('c2e726d2-536f-48c7-9983-789aa23a6d68', 'Travel'),
    ('b5e8f342-e8c0-4741-b675-44c44c1056b7', 'Food'),
    ('a3d8c6b1-7c42-4612-a5c8-c3757a75c7d0', 'Lifestyle'),
    ('9f5b8e3a-6d14-4583-b3d4-b9a12e5c1c2d', 'Programming');

-- Then insert all posts
INSERT INTO posts (id, title, content, image_url) VALUES
    ('8b72e3fa-9c6d-4c21-b549-b3c9c3b2a8d1', 
     'Getting Started with React', 
     'React is a powerful JavaScript library for building user interfaces. In this post, we''ll explore the basics of React and how to create your first component. 
     
     React''s component-based architecture makes it easy to build reusable UI elements. We''ll cover key concepts like JSX, props, and state management.
     
     By the end of this tutorial, you''ll have a solid foundation in React development and be ready to build your own applications.',
     'https://example.com/images/react-basics.jpg'),
    
    ('7e4f2d1c-5b3a-4c18-9e27-a8b6c5d4e3f2', 
     'My Trip to Japan', 
     'Last month, I had the amazing opportunity to visit Japan. From the bustling streets of Tokyo to the serene temples of Kyoto, every moment was unforgettable.
     
     The blend of traditional culture and modern technology creates a unique atmosphere that''s hard to find anywhere else in the world.
     
     This post details my two-week journey, including must-visit locations, cultural insights, and practical travel tips for anyone planning their own Japanese adventure.',
     'https://example.com/images/japan-trip.jpg'),
    
    ('6d3e1c2b-4a29-4b17-8d16-97a5b4c2d1e0', 
     'Best Ramen Spots in the City', 
     'As a ramen enthusiast, I''ve tried countless bowls across the city. Here are my top picks for the most authentic and delicious ramen.
     
     From rich tonkotsu broths to light and refreshing shoyu bases, each spot offers something unique.
     
     I''ll share detailed reviews of each location, including specialty dishes, pricing, and the best times to visit to avoid the crowds.',
     'https://example.com/images/ramen-guide.jpg'),
    
    ('5c2d0b1a-3918-4a16-7c15-86b4a3c1d0e9', 
     'Working Remotely: A Year in Review', 
     'After a full year of working remotely, I''ve learned valuable lessons about productivity, work-life balance, and maintaining professional relationships.
     
     This post covers the challenges and benefits of remote work, including practical tips for setting up your home office, managing your time effectively, and staying connected with your team.
     
     I''ll also share the tools and techniques that helped me stay productive and motivated throughout the year.',
     'https://example.com/images/remote-work.jpg'),
    
    ('4b1c9a09-2807-3a15-6b14-75a3b2c0d9e8', 
     'Understanding TypeScript', 
     'TypeScript has become increasingly popular in the web development world. Let''s dive into why you might want to use TypeScript in your next project.
     
     We''ll explore key features like static typing, interfaces, and generics, with practical examples showing how TypeScript can improve code quality and developer experience.
     
     By the end of this guide, you''ll understand the benefits of TypeScript and how to start implementing it in your projects.',
     'https://example.com/images/typescript-guide.jpg');

-- Finally, connect posts with categories (using the new IDs from above)
INSERT INTO posts_categories (id, p_id, c_id) VALUES
    ('3a0b8f98-1706-2914-5a13-64a2b1c8d7e7', '8b72e3fa-9c6d-4c21-b549-b3c9c3b2a8d1', 'd24944c7-9d71-4451-a143-93834b0297aa'),
    ('290a7e87-0605-1813-4912-53a1a0b7c6e6', '8b72e3fa-9c6d-4c21-b549-b3c9c3b2a8d1', '9f5b8e3a-6d14-4583-b3d4-b9a12e5c1c2d'),
    ('1809d876-9504-0712-3811-42a0b9a6c5d5', '7e4f2d1c-5b3a-4c18-9e27-a8b6c5d4e3f2', 'c2e726d2-536f-48c7-9983-789aa23a6d68'),
    ('0708c765-8403-9611-2710-3190a8b5c4d4', '6d3e1c2b-4a29-4b17-8d16-97a5b4c2d1e0', 'b5e8f342-e8c0-4741-b675-44c44c1056b7'),
    ('9607b654-7302-8510-1699-2089b7a4b3c3', '5c2d0b1a-3918-4a16-7c15-86b4a3c1d0e9', 'a3d8c6b1-7c42-4612-a5c8-c3757a75c7d0'),
    ('8506a543-6201-7499-0588-1988a6b3a2b2', '4b1c9a09-2807-3a15-6b14-75a3b2c0d9e8', 'd24944c7-9d71-4451-a143-93834b0297aa'),
    ('7405b432-5190-6388-9477-0877b5a2b1a1', '4b1c9a09-2807-3a15-6b14-75a3b2c0d9e8', '9f5b8e3a-6d14-4583-b3d4-b9a12e5c1c2d');

================
File: db_related/tables.sql
================
DROP TABLE IF EXISTS posts_categories;

-- Create users table
DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id CHAR(36) PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,  -- Length of 255 to accommodate bcrypt hash
    email VARCHAR(255) NOT NULL UNIQUE
);

-- Create posts table
DROP TABLE IF EXISTS posts;
CREATE TABLE posts (
    id CHAR(36) PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    content LONGTEXT NOT NULL,
    image_url VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Create categories table
DROP TABLE IF EXISTS categories;
CREATE TABLE categories (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

-- Create posts_categories intersection table
CREATE TABLE posts_categories (
    id CHAR(36) PRIMARY KEY,
    p_id VARCHAR(36) NOT NULL,
    c_id VARCHAR(36) NOT NULL,
    FOREIGN KEY (p_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (c_id) REFERENCES categories(id) ON DELETE CASCADE,
    UNIQUE(p_id, c_id)
);

-- Add indexes for better query performance
CREATE INDEX idx_posts_title ON posts(title);
CREATE INDEX idx_categories_name ON categories(name);
CREATE INDEX idx_pc_pid ON posts_categories(p_id);
CREATE INDEX idx_pc_cid ON posts_categories(c_id);

================
File: index.js
================
const express = require("express");
const app = express();
const cors = require("cors");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const cookieParser = require("cookie-parser");
const postsRouter = require("./routes/PostsRoutes");
const usersRouter = require("./routes/UsersRoutes");
const categoriesRouter = require("./routes/CategoriesRoutes");
require("dotenv").config();

app.use(express.json());
app.use(helmet());
app.use(
  cors({
    origin: [
      /^http:\/\/192\.168\.1\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]+)?$/,
      "http://localhost:4200",
    ],
    credentials: true, // Allows cookies with CORS
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "UPDATE"],
    allowedHeaders: ["Content-Type", "Authorization", "Accept"],
  })
);

app.use(cookieParser());

const limiter = rateLimit({
  windowsMs: 15 * 60 * 1000, // 15 minutes
  max: 1000, // Limit each IP to x requests per `window` (here, per 15 minutes) // originally 100 which is reasonable
});

app.use(limiter);

app.use("/posts", postsRouter);
app.use("/users", usersRouter);
app.use("/categories", categoriesRouter);

if (process.env.NODE_ENV !== "test") {
  app.listen(3000, () => {
    console.log("Server is running on port 3000");
  });
}

module.exports = app;

================
File: jest.setup.js
================
// jest.setup.js
process.env.JWT_SECRET = "test-secret";
process.env.NODE_ENV = "test";
process.env.DB_HOST = "localhost";
process.env.DB_USER = "test_user";
process.env.DB_PASSWORD = "test_password";
process.env.DB_NAME = "test_db";

================
File: middleware/authMiddleware.js
================
const jwt = require("jsonwebtoken");
require("dotenv").config();

const authMiddleware = (req, res, next) => {
  const token = req.cookies.token;

  if (!token) {
    return res.status(401).json({ error: "No token provided" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    if (error.name === "TokenExpiredError") {
      return res.status(401).json({ error: "Token expired" });
    }
    return res.status(401).json({ error: "Invalid token" });
  }
};

// Might be used in the future if users have different access levels
// const isAdmin = (req, res, next) => {
//   if (!req.user || !req.user.access_level) {
//     return res.status(403).json({ error: "Admin access required" });
//   }
//   next();
// };

// module.exports = { authMiddleware, isAdmin };
module.exports = { authMiddleware };

================
File: models/CategoriesModel.js
================
const pool = require("../utils/db");

async function getAllCategories() {
  const [rows] = await pool.query(`SELECT * FROM categories`);
  return rows;
}

async function getCategoryById(id) {
  const [rows] = await pool.query(`SELECT * FROM categories WHERE id = ?`, [
    id,
  ]);
  return rows[0];
}

async function getCategoryByName(name) {
  const [rows] = await pool.query(`SELECT * FROM categories WHERE name = ?`, [
    name,
  ]);
  return rows[0];
}

async function createCategory(name) {
  const [rows] = await pool.query(`INSERT INTO categories (name) VALUES (?)`, [
    name,
  ]);
}

async function editCategory(name, id) {
  const [rows] = await pool.query(
    `UPDATE categories SET name = ? WHERE id = ?`,
    [name, id]
  );
}

async function deleteCategory(id) {
  const [rows] = await pool.query(`DELETE FROM categories WHERE id = ?`, [id]);
}

module.exports = {
  getAllCategories,
  getCategoryById,
  getCategoryByName,
  createCategory,
  editCategory,
  deleteCategory,
};

================
File: models/PostsModel.js
================
const pool = require("../utils/db");

async function getAllPosts() {
  const [rows] = await pool.query(`SELECT * FROM posts`);
  return rows;
}

async function getPostById(id) {
  const [rows] = await pool.query(`SELECT * FROM posts WHERE id = ?`, [id]);
  return rows[0];
}

async function createPost(id, title, content) {
  const [rows] = await pool.query(
    `INSERT INTO posts (id, title, content) VALUES (?, ?, ?)`,
    [id, title, content]
  );
}

async function editPost(title, content, id) {
  const [rows] = await pool.query(
    `UPDATE posts SET title = ?, content = ? WHERE id = ?`,
    [title, content, id]
  );
}

async function deletePost(id) {
  const [rows] = await pool.query(`DELETE FROM posts WHERE id = ?`, [id]);
}

module.exports = {
  getAllPosts,
  getPostById,
  createPost,
  editPost,
  deletePost,
};

================
File: models/UsersModel.js
================
const pool = require("../utils/db");

async function getAllUsers() {
  const [rows] = await pool.query(`SELECT id, username,email FROM users`);
  return rows;
}

async function getUserByEmail(email) {
  const [rows] = await pool.query(`SELECT * FROM users WHERE email = ?`, [
    email,
  ]);
  return rows;
}

module.exports = {
  getAllUsers,
  getUserByEmail,
};

================
File: package.json
================
{
  "name": "generic_api",
  "version": "0.0.1",
  "description": "A generic API for use with various frontends",
  "main": "index.js",
  "scripts": {
    "test": "jest --detectOpenHandles",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "keywords": [
    "api",
    "javascript",
    "js",
    "mysql",
    "sql",
    "nodemon",
    "express",
    "node",
    "npm"
  ],
  "author": "Sigmund Frost",
  "license": "MIT",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "helmet": "^8.0.0",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.12.0",
    "nodemon": "^3.1.9",
    "sanitize-html": "^2.14.0",
    "sequelize": "^6.37.5",
    "uuidv4": "^6.2.13",
    "validator": "^13.12.0"
  },
  "devDependencies": {
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "supertest": "^7.0.0"
  }
}

================
File: readme.md
================
# Generic API Documentation

## Overview

This is a RESTful API built with Express.js that provides authentication and CRUD operations for blog posts. The API uses JWT tokens for authentication and MySQL for data storage.

## Getting Started

### Prerequisites

- Node.js (v14 or higher)
- MySQL Server
- npm

### Installation

1. Clone the repository

```bash
git clone [repository-url]
```

2. Install dependencies

```bash
npm install
```

3. Create a `.env` file in the root directory with the following variables:

```env
DB_HOST=localhost
DB_USER=your_database_user
DB_PASSWORD=your_database_password
DB_NAME=your_database_name
JWT_SECRET=your_jwt_secret
NODE_ENV=development
```

4. Initialize the database by running the SQL scripts in the `db_related` folder:
   - `tables.sql`: Creates the database schema
   - `dummy_data.sql`: Populates the database with sample data

## API Endpoints

### Authentication

#### Login

- **POST** `/users/login`
- **Body:**

```json
{
  "email": "user@example.com",
  "password": "yourpassword"
}
```

- **Response:** Returns JWT token in cookie and response body

#### Logout

- **POST** `/users/logout`
- **Auth Required:** Yes
- **Response:** Clears the JWT cookie

### Posts

#### Get All Posts

- **GET** `/posts`
- **Auth Required:** No
- **Response:** Array of all posts

#### Get Single Post

- **GET** `/posts/:id`
- **Auth Required:** No
- **Response:** Single post object

#### Create Post

- **POST** `/posts`
- **Auth Required:** Yes
- **Body:**

```json
{
  "title": "Post Title",
  "content": "Post content goes here"
}
```

#### Update Post

- **PUT** `/posts/:id`
- **Auth Required:** Yes
- **Body:**

```json
{
  "title": "Updated Title",
  "content": "Updated content"
}
```

#### Delete Post

- **DELETE** `/posts/:id`
- **Auth Required:** Yes

## Security Features

- JWT-based authentication
- HTTP-only cookies
- Rate limiting
- Input sanitization
- CORS protection
- Helmet.js security headers

## Testing

The API includes a comprehensive test suite using Jest and Supertest.

1. Install test dependencies:

```bash
npm install --save-dev jest supertest cross-env
```

2. Run tests:

```bash
npm test
```

3. Run tests with coverage:

```bash
npm run test:coverage
```

## Database Schema

### Users Table

```sql
CREATE TABLE users (
    id CHAR(36) PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE
);
```

### Posts Table

```sql
CREATE TABLE posts (
    id CHAR(36) PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL
);
```

### Categories Table

```sql
CREATE TABLE categories (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);
```

### Posts_Categories Table

```sql
CREATE TABLE posts_categories (
    id CHAR(36) PRIMARY KEY,
    p_id VARCHAR(36) NOT NULL,
    c_id VARCHAR(36) NOT NULL,
    FOREIGN KEY (p_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (c_id) REFERENCES categories(id) ON DELETE CASCADE
);
```

## Error Handling

The API returns standard HTTP status codes:

- 200: Success
- 400: Bad Request
- 401: Unauthorized
- 403: Forbidden
- 500: Internal Server Error

Error responses follow this format:

```json
{
  "error": "Error message here",
  "details": "Optional additional details"
}
```

## Rate Limiting

The API implements rate limiting with the following defaults:

- Window: 15 minutes
- Max Requests: 100 per window
- This can be configured in `index.js`

## CORS Configuration

CORS is configured to accept requests from:

- `localhost:4200`
- Local IP addresses (192.168.1.\*)

To add additional origins, modify the CORS configuration in `index.js`.

================
File: routes/CategoriesRoutes.js
================
const express = require("express");
const categoriesRouter = express.Router();
const categoriesController = require("../controllers/CategoriesController");
const { authMiddleware } = require("../middleware/authMiddleware");

/* Public routes */
categoriesRouter.get("/", categoriesController.showAllCategories);

/* Protected routes */

module.exports = categoriesRouter;

================
File: routes/PostsRoutes.js
================
const express = require("express");
const postsRouter = express.Router();
const postsController = require("../controllers/PostsController");
const { authMiddleware } = require("../middleware/authMiddleware");

/* Public routes */
postsRouter.get("/", postsController.showAllPosts);
postsRouter.get("/:id", postsController.showPost);

/* Protected routes */
postsRouter.post("/", authMiddleware, postsController.newPost);
postsRouter.put("/:id", authMiddleware, postsController.editPost);
postsRouter.delete("/:id", authMiddleware, postsController.deletePost);

module.exports = postsRouter;

================
File: routes/UsersRoutes.js
================
const express = require("express");
const usersRouter = express.Router();
const usersController = require("../controllers/UsersController");
const { authMiddleware } = require("../middleware/authMiddleware");

/* Public routes */
usersRouter.post("/login", usersController.loginUser);

/* Protected routes */
usersRouter.post("/logout", authMiddleware, usersController.logoutUser);

module.exports = usersRouter;

================
File: todo
================
category management

re-initialize the database to reflect the changes

================
File: utils/db.js
================
const mysql = require("mysql2/promise");
require("dotenv").config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

module.exports = pool;

================
File: wireframe/generic_api.drawio
================
<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36" version="24.8.3" pages="2">
  <diagram name="use-case" id="lSGKespuC975Ng1iwibC">
    <mxGraphModel dx="846" dy="570" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="ewaDP58GyX779DTLfJw4" name="class">
    <mxGraphModel dx="1066" dy="678" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="m0o3Lie768pR-C5qGEWz-1" value="Posts" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="70" width="140" height="104" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-2" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-1">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-3" value="+ title: String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-1">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-4" value="+ content: Text" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-1">
          <mxGeometry y="78" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-6" value="Catagories" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="250" width="140" height="78" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-7" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-6">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-8" value="+ name: String Unique" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-6">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-10" value="Posts_Categories" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="250" y="146" width="140" height="104" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-11" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-10">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-12" value="+ p_id: String FK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-10">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-13" value="+ c_id: String FK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-10">
          <mxGeometry y="78" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-14" value="" style="edgeStyle=entityRelationEdgeStyle;fontSize=12;html=1;endArrow=ERoneToMany;rounded=0;" edge="1" parent="1" source="m0o3Lie768pR-C5qGEWz-3" target="m0o3Lie768pR-C5qGEWz-12">
          <mxGeometry width="100" height="100" relative="1" as="geometry">
            <mxPoint x="260" y="310" as="sourcePoint" />
            <mxPoint x="360" y="210" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-15" value="" style="edgeStyle=entityRelationEdgeStyle;fontSize=12;html=1;endArrow=ERoneToMany;rounded=0;exitX=0.983;exitY=-0.027;exitDx=0;exitDy=0;exitPerimeter=0;entryX=-0.006;entryY=1.018;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="m0o3Lie768pR-C5qGEWz-8" target="m0o3Lie768pR-C5qGEWz-12">
          <mxGeometry width="100" height="100" relative="1" as="geometry">
            <mxPoint x="250" y="320" as="sourcePoint" />
            <mxPoint x="350" y="220" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-16" value="Users" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="460" y="120" width="140" height="130" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-17" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-18" value="+ username: String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-19" value="+ password: String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="78" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-20" value="+ email: String Unique" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="104" width="140" height="26" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>

This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-17T10:26:22.590Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
controllers/PostsController.js
controllers/UsersController.js
db_related/dummy_data.sql
db_related/tables.sql
index.js
middleware/authMiddleware.js
models/PostsModel.js
models/UsersModel.js
package.json
routes/PostsRoutes.js
routes/UsersRoutes.js
todo
utils/db.js
wireframe/generic_api.drawio

================================================================
Repository Files
================================================================

================
File: .gitignore
================
/node_modules
.env

================
File: controllers/PostsController.js
================
const { v4: uuidv4 } = require("uuid");
const postsModel = require("../models/PostsModel");
const sanitizeHtml = require("sanitize-html");
const validator = require("validator");
const jwt = require("jsonwebtoken");
require("dotenv").config();
const secret = process.env.JWT_SECRET;

async function showAllPosts(req, res) {
  try {
    const result = await postsModel.getAllPosts();
    res.status(200).send(result);
  } catch (err) {
    console.log(err);
  }
}

async function showPost(req, res) {
  try {
    let id = req.params.id;
    id = sanitizeHtml(id);

    if (validator.isUUID(id)) {
      const result = await postsModel.getPostById(id);
      res.status(200).send(result);
    } else {
      res.status(400).json({ error: "Invalid post id!" });
    }
  } catch (err) {
    console.log(err);
  }
}

async function newPost(req, res) {
  let { title, content } = req.body;
  const id = uuidv4();

  title = sanitizeHtml(title);
  content = sanitizeHtml(content);

  if (validator.isUUID(id)) {
    try {
      await postsModel.createPost(id, title, content);
      res.status(200).json({ message: "Post created successfully!" });
    } catch (err) {
      res
        .status(500)
        .json({ error: "Internal server error", details: err.message });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

async function editPost(req, res) {
  let { title, content } = req.body;
  const id = req.params.id;

  title = sanitizeHtml(title);
  content = sanitizeHtml(content);

  if (validator.isUUID(id)) {
    try {
      await postsModel.editPost(title, content, id);
      res.status(200).json({ message: "Post edited successfully!" });
    } catch (err) {
      res
        .status(500)
        .json({ error: "Internal server error", details: err.message });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

async function deletePost(req, res) {
  const id = req.params.id;

  if (validator.isUUID(id)) {
    try {
      await postsModel.deletePost(id);
      res.status(200).json({ message: "Post deleted successfully!" });
    } catch (err) {
      res
        .status(500)
        .json({ error: "Internal server error", details: err.message });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

module.exports = {
  showAllPosts,
  showPost,
  newPost,
  editPost,
  deletePost,
};

================
File: controllers/UsersController.js
================
const usersModel = require("../models/UsersModel");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
require("dotenv").config();
const secret = process.env.JWT_SECRET;
const sanitizeHtml = require("sanitize-html");
const validator = require("validator");

// Token generation
function generateToken(user) {
  return jwt.sign(
    {
      id: user.id,
      username: user.username,
      email: user.email,
    },
    secret,
    { expiresIn: "30d" }
  );
}

async function loginUser(req, res) {
  let { email, password } = req.body;
  email = sanitizeHtml(email);
  password = sanitizeHtml(password);

  if (validator.isEmail(email) && validator.isAlphanumeric(password)) {
    try {
      const user = await usersModel.getUserByEmail(email);
      if (user.length === 0) {
        return res.status(401).json({ error: "Invalid credentials" });
      }

      const isMatch = await bcrypt.compare(password, user[0].password);
      if (!isMatch) {
        return res.status(401).json({ error: "Invalid credentials" });
      }

      const token = generateToken(user);

      // secure: process.env.NODE_ENV === "production"
      res.cookie("token", token, {
        httpOnly: true,
        secure: process.env.NODE_ENV === "production",
        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days
        sameSite: "lax", // Added security measure
        domain: "localhost",
        path: "/",
      });

      res.status(200).json({
        message: "Login successful",
        token: token,
      });
    } catch (err) {
      res.status(500).json({ error: "Internal server error" });
    }
  } else {
    res.status(400).json({ error: "Invalid data!" });
  }
}

async function showAllUsers(req, res) {
  try {
    const result = await usersModel.getAllUsers();
    res.status(200).send(result);
  } catch (err) {
    console.log(err);
  }
}

module.exports = {
  loginUser,
  showAllUsers,
};

================
File: db_related/dummy_data.sql
================
-- First, insert admin user (password is 'admin123' hashed with bcrypt)
INSERT INTO users (id, username, email, password) 
VALUES (
    'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
    'admin',
    'admin@example.com',
    '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewfWxHrR/jQh/zTC'  -- 'admin123' hashed
);

-- Then insert all categories
INSERT INTO categories (id, name) VALUES
    ('b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Technology'),
    ('b1eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Travel'),
    ('b2eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Food'),
    ('b3eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Lifestyle'),
    ('b4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Programming');

-- Then insert all posts
INSERT INTO posts (id, title, content) VALUES
    ('c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Getting Started with React', 
     'React is a powerful JavaScript library for building user interfaces. In this post, we''ll explore the basics of React and how to create your first component...'),
    
    ('c1eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'My Trip to Japan', 
     'Last month, I had the amazing opportunity to visit Japan. From the bustling streets of Tokyo to the serene temples of Kyoto...'),
    
    ('c2eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Best Ramen Spots in the City', 
     'As a ramen enthusiast, I''ve tried countless bowls across the city. Here are my top picks for the most authentic and delicious ramen...'),
    
    ('c3eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Working Remotely: A Year in Review', 
     'After a full year of working remotely, I''ve learned valuable lessons about productivity, work-life balance, and maintaining professional relationships...'),
    
    ('c4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Understanding TypeScript', 
     'TypeScript has become increasingly popular in the web development world. Let''s dive into why you might want to use TypeScript in your next project...');

-- Finally, connect posts with categories
INSERT INTO posts_categories (id, p_id, c_id) VALUES
    ('d0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),
    ('d1eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),
    ('d2eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c1eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b1eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),
    ('d3eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c2eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b2eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),
    ('d4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c3eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b3eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),
    ('d5eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11'),
    ('d6eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'c4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'b4eebc99-9c0b-4ef8-bb6d-6bb9bd380a11');

================
File: db_related/tables.sql
================
DROP TABLE IF EXISTS posts_categories;

-- Create users table
DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id CHAR(36) PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,  -- Length of 255 to accommodate bcrypt hash
    email VARCHAR(255) NOT NULL UNIQUE
);

-- Create posts table
DROP TABLE IF EXISTS posts;
CREATE TABLE posts (
    id CHAR(36) PRIMARY KEY,
    title VARCHAR(100) NOT NULL,
    content TEXT NOT NULL
);

-- Create categories table
DROP TABLE IF EXISTS categories;
CREATE TABLE categories (
    id CHAR(36) PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE
);

-- Create posts_categories intersection table
CREATE TABLE posts_categories (
    id CHAR(36) PRIMARY KEY,
    p_id VARCHAR(36) NOT NULL,
    c_id VARCHAR(36) NOT NULL,
    FOREIGN KEY (p_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (c_id) REFERENCES categories(id) ON DELETE CASCADE
);

-- Add indexes for better query performance
CREATE INDEX idx_posts_title ON posts(title);
CREATE INDEX idx_categories_name ON categories(name);
CREATE INDEX idx_pc_pid ON posts_categories(p_id);
CREATE INDEX idx_pc_cid ON posts_categories(c_id);

================
File: index.js
================
const express = require("express");
const app = express();
const cors = require("cors");
const helmet = require("helmet");
const rateLimit = require("express-rate-limit");
const cookieParser = require("cookie-parser");
const postsRouter = require("./routes/PostsRoutes");
const usersRouter = require("./routes/UsersRoutes");
require("dotenv").config();

app.use(express.json());
app.use(helmet());
app.use(
  cors({
    origin: [
      /^http:\/\/192\.168\.1\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(:[0-9]+)?$/,
      "http://localhost:4200",
    ],
    credentials: true, // Allows cookies with CORS
    methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "UPDATE"],
    allowedHeaders: ["Content-Type", "Authorization", "Accept"],
  })
);

app.use(cookieParser());

const limiter = rateLimit({
  windowsMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // Limit each IP to 100 requests per `window` (here, per 15 minutes) // originally 100 which is reasonable
});

app.use(limiter);

app.use("/posts", postsRouter);
app.use("/users", usersRouter);

if (process.env.NODE_ENV !== "test") {
  app.listen(3000, () => {
    console.log("Server is running on port 3000");
  });
}

module.exports = app;

================
File: middleware/authMiddleware.js
================
const jwt = require("jsonwebtoken");
require("dotenv").config();

const authMiddleware = (req, res, next) => {
  const token = req.cookies.token;

  if (!token) {
    return res.status(401).json({ error: "No token provided" });
  }

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    if (error.name === "TokenExpiredError") {
      return res.status(401).json({ error: "Token expired" });
    }
    return res.status(401).json({ error: "Invalid token" });
  }
};

// Might be used in the future if users have different access levels
// const isAdmin = (req, res, next) => {
//   if (!req.user || !req.user.access_level) {
//     return res.status(403).json({ error: "Admin access required" });
//   }
//   next();
// };

// module.exports = { authMiddleware, isAdmin };
module.exports = { authMiddleware };

================
File: models/PostsModel.js
================
const pool = require("../utils/db");

async function getAllPosts() {
  const [rows] = await pool.query(`SELECT * FROM posts`);
  return rows;
}

async function getPostById(id) {
  const [rows] = await pool.query(`SELECT * FROM posts WHERE id = ?`, [id]);
  return rows[0];
}

async function createPost(id, title, content) {
  const [rows] = await pool.query(
    `INSERT INTO posts (id, title, content) VALUES (?, ?, ?)`,
    [id, title, content]
  );
}

async function editPost(title, content, id) {
  const [rows] = await pool.query(
    `UPDATE posts SET title = ?, content = ? WHERE id = ?`,
    [title, content, id]
  );
}

async function deletePost(id) {
  const [rows] = await pool.query(`DELETE FROM posts WHERE id = ?`, [id]);
}

module.exports = {
  getAllPosts,
  getPostById,
  createPost,
  editPost,
  deletePost,
};

================
File: models/UsersModel.js
================
const pool = require("../utils/db");

async function getAllUsers() {
  const [rows] = await pool.query(`SELECT id, username,email FROM users`);
  return rows;
}

async function getUserByEmail(email) {
  const [rows] = await pool.query(`SELECT * FROM users WHERE email = ?`, [
    email,
  ]);
  return rows;
}

module.exports = {
  getAllUsers,
  getUserByEmail,
};

================
File: package.json
================
{
  "name": "generic_api",
  "version": "0.0.1",
  "description": "A generic API for use with various frontends",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "api",
    "javascript",
    "js",
    "mysql",
    "sql",
    "nodemon",
    "express",
    "node",
    "npm"
  ],
  "author": "Sigmund Frost",
  "license": "MIT",
  "dependencies": {
    "bcrypt": "^5.1.1",
    "cookie-parser": "^1.4.7",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "express-rate-limit": "^7.5.0",
    "helmet": "^8.0.0",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.12.0",
    "nodemon": "^3.1.9",
    "sanitize-html": "^2.14.0",
    "sequelize": "^6.37.5",
    "uuidv4": "^6.2.13",
    "validator": "^13.12.0"
  }
}

================
File: routes/PostsRoutes.js
================
const express = require("express");
const postsRouter = express.Router();
const postsController = require("../controllers/PostsController");
const { authMiddleware } = require("../middleware/authMiddleware");

/* Public routes */
postsRouter.get("/", postsController.showAllPosts);
postsRouter.get("/:id", postsController.showPost);

/* Protected routes */
postsRouter.post("/", authMiddleware, postsController.newPost);
postsRouter.put("/:id", authMiddleware, postsController.editPost);
postsRouter.delete("/:id", authMiddleware, postsController.deletePost);

module.exports = postsRouter;

================
File: routes/UsersRoutes.js
================
const express = require("express");
const usersRouter = express.Router();
const usersController = require("../controllers/UsersController");
const { authMiddleware } = require("../middleware/authMiddleware");

/* Public routes */
usersRouter.post("/login", usersController.loginUser);

module.exports = usersRouter;

================
File: todo
================
post, edit, delete posts

================
File: utils/db.js
================
const mysql = require("mysql2/promise");
require("dotenv").config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

module.exports = pool;

================
File: wireframe/generic_api.drawio
================
<mxfile host="app.diagrams.net" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36" version="24.8.3" pages="2">
  <diagram name="use-case" id="lSGKespuC975Ng1iwibC">
    <mxGraphModel dx="846" dy="570" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
      </root>
    </mxGraphModel>
  </diagram>
  <diagram id="ewaDP58GyX779DTLfJw4" name="class">
    <mxGraphModel dx="1066" dy="678" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="m0o3Lie768pR-C5qGEWz-1" value="Posts" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="70" width="140" height="104" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-2" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-1">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-3" value="+ title: String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-1">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-4" value="+ content: Text" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-1">
          <mxGeometry y="78" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-6" value="Catagories" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="10" y="250" width="140" height="78" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-7" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-6">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-8" value="+ name: String Unique" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-6">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-10" value="Posts_Categories" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="250" y="146" width="140" height="104" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-11" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-10">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-12" value="+ p_id: String FK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-10">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-13" value="+ c_id: String FK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-10">
          <mxGeometry y="78" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-14" value="" style="edgeStyle=entityRelationEdgeStyle;fontSize=12;html=1;endArrow=ERoneToMany;rounded=0;" edge="1" parent="1" source="m0o3Lie768pR-C5qGEWz-3" target="m0o3Lie768pR-C5qGEWz-12">
          <mxGeometry width="100" height="100" relative="1" as="geometry">
            <mxPoint x="260" y="310" as="sourcePoint" />
            <mxPoint x="360" y="210" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-15" value="" style="edgeStyle=entityRelationEdgeStyle;fontSize=12;html=1;endArrow=ERoneToMany;rounded=0;exitX=0.983;exitY=-0.027;exitDx=0;exitDy=0;exitPerimeter=0;entryX=-0.006;entryY=1.018;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="m0o3Lie768pR-C5qGEWz-8" target="m0o3Lie768pR-C5qGEWz-12">
          <mxGeometry width="100" height="100" relative="1" as="geometry">
            <mxPoint x="250" y="320" as="sourcePoint" />
            <mxPoint x="350" y="220" as="targetPoint" />
          </mxGeometry>
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-16" value="Users" style="swimlane;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=none;horizontalStack=0;resizeParent=1;resizeParentMax=0;resizeLast=0;collapsible=1;marginBottom=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
          <mxGeometry x="460" y="120" width="140" height="130" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-17" value="+ id: String Unique PK" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="26" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-18" value="+ username: String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="52" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-19" value="+ password: String" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="78" width="140" height="26" as="geometry" />
        </mxCell>
        <mxCell id="m0o3Lie768pR-C5qGEWz-20" value="+ email: String Unique" style="text;strokeColor=none;fillColor=none;align=left;verticalAlign=top;spacingLeft=4;spacingRight=4;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;whiteSpace=wrap;html=1;" vertex="1" parent="m0o3Lie768pR-C5qGEWz-16">
          <mxGeometry y="104" width="140" height="26" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
